<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.ashish.csv_parser_android&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.ashish.csv_parser_android&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    kotlin(&quot;plugin.serialization&quot;) version &quot;1.9.0&quot;&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.ashish.csv_parser_android&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.ashish.csv_parser_android&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    // Kotlin Serialization&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1&quot;)&#10;&#10;    // XML Serialization&#10;    implementation(&quot;io.github.pdvrieze.xmlutil:core-android:0.86.1&quot;)&#10;    implementation(&quot;io.github.pdvrieze.xmlutil:serialization-android:0.86.1&quot;)&#10;&#10;    // Compose Material3 Extended Icons&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;&#10;    // ViewModel&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Csvparserandroid&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Csvparserandroid&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&#10;        android:maxSdkVersion=&quot;32&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_IMAGES&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_VIDEO&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_AUDIO&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Csvparserandroid&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Csvparserandroid&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/MainViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/MainViewModel.kt" />
              <option name="updatedContent" value="package com.ashish.csv_parser_android&#10;&#10;import android.net.Uri&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.ashish.csv_parser_android.model.DeviceReport&#10;import com.ashish.csv_parser_android.model.EvoluteDeviceManagement&#10;import com.ashish.csv_parser_android.model.OutputFormat&#10;import com.ashish.csv_parser_android.model.ParseState&#10;import com.ashish.csv_parser_android.parser.CsvParser&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;import nl.adaptivity.xmlutil.serialization.XML&#10;import java.io.IOException&#10;&#10;class MainViewModel : ViewModel() {&#10;    private val csvParser = CsvParser()&#10;    private val _uiState = MutableStateFlow&lt;ParseState&gt;(ParseState.Idle)&#10;    val uiState: StateFlow&lt;ParseState&gt; = _uiState.asStateFlow()&#10;&#10;    private val prettyJson = Json { prettyPrint = true }&#10;    private val prettyXml = XML { indent = 4 }&#10;&#10;    fun processFile(uri: Uri, contentResolver: android.content.ContentResolver, outputFormat: OutputFormat) {&#10;        viewModelScope.launch {&#10;            _uiState.value = ParseState.Loading&#10;            try {&#10;                val content = withContext(Dispatchers.IO) {&#10;                    contentResolver.openInputStream(uri)?.use { stream -&gt;&#10;                        stream.bufferedReader().readText()&#10;                    } ?: throw IOException(&quot;Could not read file&quot;)&#10;                }&#10;&#10;                val deviceReport = withContext(Dispatchers.Default) {&#10;                    csvParser.parse(content)&#10;                }&#10;&#10;                val outputString = withContext(Dispatchers.Default) {&#10;                    generateOutput(deviceReport, outputFormat)&#10;                }&#10;&#10;                _uiState.value = ParseState.Success(&#10;                    deviceReport = deviceReport,&#10;                    outputString = outputString,&#10;                    outputFormat = outputFormat&#10;                )&#10;            } catch (e: Exception) {&#10;                _uiState.value = ParseState.Error(e.message ?: &quot;An unknown error occurred&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun generateOutput(deviceReport: DeviceReport, outputFormat: OutputFormat): String {&#10;        val evoluteDeviceManagement = EvoluteDeviceManagement(listOf(deviceReport))&#10;        return when (outputFormat) {&#10;            OutputFormat.JSON -&gt; prettyJson.encodeToString(evoluteDeviceManagement)&#10;            OutputFormat.XML -&gt; prettyXml.encodeToString(evoluteDeviceManagement)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/data/CsvParser.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/data/CsvParser.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/model/CsvModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/model/CsvModels.kt" />
              <option name="updatedContent" value="package com.ashish.csv_parser_android.model&#10;&#10;import kotlinx.serialization.Serializable&#10;&#10;@Serializable&#10;data class DeviceReport(&#10;    val serverID: String,&#10;    val deviceLines: List&lt;DeviceLine&gt;,&#10;    val recordCount: Int&#10;)&#10;&#10;@Serializable&#10;data class DeviceLine(&#10;    val IMEI1: String,&#10;    val IMEI2: String,&#10;    val serialNumber: String,&#10;    val deviceName: String&#10;)&#10;&#10;@Serializable&#10;data class EvoluteDeviceManagement(&#10;    val deviceDetails: List&lt;DeviceReport&gt;&#10;)&#10;&#10;sealed class ParseState {&#10;    object Idle : ParseState()&#10;    object Loading : ParseState()&#10;    data class Success(&#10;        val deviceReport: DeviceReport,&#10;        val outputString: String,&#10;        val outputFormat: OutputFormat&#10;    ) : ParseState()&#10;    data class Error(val message: String) : ParseState()&#10;}&#10;&#10;enum class OutputFormat {&#10;    JSON, XML&#10;}&#10;&#10;sealed class CsvLine {&#10;    data class Header(val serverID: String) : CsvLine()&#10;    data class Record(&#10;        val IMEI1: String,&#10;        val IMEI2: String,&#10;        val serialNumber: String,&#10;        val deviceName: String&#10;    ) : CsvLine()&#10;    data class Trailer(val count: Int) : CsvLine()&#10;}&#10;&#10;class CsvParseException(message: String) : Exception(message)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.ashish.csv_parser_android.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val md_theme_light_primary = Color(0xFF006B5A)&#10;val md_theme_light_onPrimary = Color(0xFFFFFFFF)&#10;val md_theme_light_primaryContainer = Color(0xFF7AF8DC)&#10;val md_theme_light_onPrimaryContainer = Color(0xFF002019)&#10;val md_theme_light_secondary = Color(0xFF4B635C)&#10;val md_theme_light_onSecondary = Color(0xFFFFFFFF)&#10;val md_theme_light_secondaryContainer = Color(0xFFCDE8DF)&#10;val md_theme_light_onSecondaryContainer = Color(0xFF07201A)&#10;val md_theme_light_tertiary = Color(0xFF426277)&#10;val md_theme_light_onTertiary = Color(0xFFFFFFFF)&#10;val md_theme_light_tertiaryContainer = Color(0xFFC6E7FF)&#10;val md_theme_light_onTertiaryContainer = Color(0xFF001E2E)&#10;val md_theme_light_error = Color(0xFFBA1A1A)&#10;val md_theme_light_errorContainer = Color(0xFFFFDAD6)&#10;val md_theme_light_onError = Color(0xFFFFFFFF)&#10;val md_theme_light_onErrorContainer = Color(0xFF410002)&#10;val md_theme_light_background = Color(0xFFFBFDF9)&#10;val md_theme_light_onBackground = Color(0xFF191C1B)&#10;val md_theme_light_surface = Color(0xFFFBFDF9)&#10;val md_theme_light_onSurface = Color(0xFF191C1B)&#10;val md_theme_light_surfaceVariant = Color(0xFFDBE5E0)&#10;val md_theme_light_onSurfaceVariant = Color(0xFF3F4945)&#10;val md_theme_light_outline = Color(0xFF6F7975)&#10;val md_theme_light_inverseOnSurface = Color(0xFFEFF1EE)&#10;val md_theme_light_inverseSurface = Color(0xFF2E3130)&#10;val md_theme_light_inversePrimary = Color(0xFF5CDBC0)&#10;val md_theme_light_shadow = Color(0xFF000000)&#10;val md_theme_light_surfaceTint = Color(0xFF006B5A)&#10;val md_theme_light_outlineVariant = Color(0xFFBFC9C4)&#10;val md_theme_light_scrim = Color(0xFF000000)&#10;&#10;val md_theme_dark_primary = Color(0xFF5CDBC0)&#10;val md_theme_dark_onPrimary = Color(0xFF00382E)&#10;val md_theme_dark_primaryContainer = Color(0xFF005143)&#10;val md_theme_dark_onPrimaryContainer = Color(0xFF7AF8DC)&#10;val md_theme_dark_secondary = Color(0xFFB1CCC3)&#10;val md_theme_dark_onSecondary = Color(0xFF1D352E)&#10;val md_theme_dark_secondaryContainer = Color(0xFF334B44)&#10;val md_theme_dark_onSecondaryContainer = Color(0xFFCDE8DF)&#10;val md_theme_dark_tertiary = Color(0xFFAACBE4)&#10;val md_theme_dark_onTertiary = Color(0xFF0F3447)&#10;val md_theme_dark_tertiaryContainer = Color(0xFF294A5F)&#10;val md_theme_dark_onTertiaryContainer = Color(0xFFC6E7FF)&#10;val md_theme_dark_error = Color(0xFFFFB4AB)&#10;val md_theme_dark_errorContainer = Color(0xFF93000A)&#10;val md_theme_dark_onError = Color(0xFF690005)&#10;val md_theme_dark_onErrorContainer = Color(0xFFFFDAD6)&#10;val md_theme_dark_background = Color(0xFF191C1B)&#10;val md_theme_dark_onBackground = Color(0xFFE1E3E0)&#10;val md_theme_dark_surface = Color(0xFF191C1B)&#10;val md_theme_dark_onSurface = Color(0xFFE1E3E0)&#10;val md_theme_dark_surfaceVariant = Color(0xFF3F4945)&#10;val md_theme_dark_onSurfaceVariant = Color(0xFFBFC9C4)&#10;val md_theme_dark_outline = Color(0xFF89938F)&#10;val md_theme_dark_inverseOnSurface = Color(0xFF191C1B)&#10;val md_theme_dark_inverseSurface = Color(0xFFE1E3E0)&#10;val md_theme_dark_inversePrimary = Color(0xFF006B5A)&#10;val md_theme_dark_shadow = Color(0xFF000000)&#10;val md_theme_dark_surfaceTint = Color(0xFF5CDBC0)&#10;val md_theme_dark_outlineVariant = Color(0xFF3F4945)&#10;val md_theme_dark_scrim = Color(0xFF000000)&#10;" />
              <option name="updatedContent" value="package com.ashish.csv_parser_android.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;val md_theme_light_primary = Color(0xFF006B5A)&#10;val md_theme_light_onPrimary = Color(0xFFFFFFFF)&#10;val md_theme_light_primaryContainer = Color(0xFF7AF8DC)&#10;val md_theme_light_onPrimaryContainer = Color(0xFF002019)&#10;val md_theme_light_secondary = Color(0xFF4B635C)&#10;val md_theme_light_onSecondary = Color(0xFFFFFFFF)&#10;val md_theme_light_secondaryContainer = Color(0xFFCDE8DF)&#10;val md_theme_light_onSecondaryContainer = Color(0xFF07201A)&#10;val md_theme_light_tertiary = Color(0xFF426277)&#10;val md_theme_light_onTertiary = Color(0xFFFFFFFF)&#10;val md_theme_light_tertiaryContainer = Color(0xFFC6E7FF)&#10;val md_theme_light_onTertiaryContainer = Color(0xFF001E2E)&#10;val md_theme_light_error = Color(0xFFBA1A1A)&#10;val md_theme_light_errorContainer = Color(0xFFFFDAD6)&#10;val md_theme_light_onError = Color(0xFFFFFFFF)&#10;val md_theme_light_onErrorContainer = Color(0xFF410002)&#10;val md_theme_light_background = Color(0xFFFBFDF9)&#10;val md_theme_light_onBackground = Color(0xFF191C1B)&#10;val md_theme_light_surface = Color(0xFFFBFDF9)&#10;val md_theme_light_onSurface = Color(0xFF191C1B)&#10;val md_theme_light_surfaceVariant = Color(0xFFDBE5E0)&#10;val md_theme_light_onSurfaceVariant = Color(0xFF3F4945)&#10;val md_theme_light_outline = Color(0xFF6F7975)&#10;val md_theme_light_inverseOnSurface = Color(0xFFEFF1EE)&#10;val md_theme_light_inverseSurface = Color(0xFF2E312F)&#10;val md_theme_light_inversePrimary = Color(0xFF5CDBC0)&#10;val md_theme_light_surfaceTint = Color(0xFF006B5A)&#10;val md_theme_light_outlineVariant = Color(0xFFBFC9C4)&#10;val md_theme_light_scrim = Color(0xFF000000)&#10;&#10;val md_theme_dark_primary = Color(0xFF5CDBC0)&#10;val md_theme_dark_onPrimary = Color(0xFF00382E)&#10;val md_theme_dark_primaryContainer = Color(0xFF005143)&#10;val md_theme_dark_onPrimaryContainer = Color(0xFF7AF8DC)&#10;val md_theme_dark_secondary = Color(0xFFB1CCC4)&#10;val md_theme_dark_onSecondary = Color(0xFF1D352F)&#10;val md_theme_dark_secondaryContainer = Color(0xFF334B45)&#10;val md_theme_dark_onSecondaryContainer = Color(0xFFCDE8DF)&#10;val md_theme_dark_tertiary = Color(0xFFAACAE3)&#10;val md_theme_dark_onTertiary = Color(0xFF153348)&#10;val md_theme_dark_tertiaryContainer = Color(0xFF2C4A5F)&#10;val md_theme_dark_onTertiaryContainer = Color(0xFFC6E7FF)&#10;val md_theme_dark_error = Color(0xFFFFB4AB)&#10;val md_theme_dark_errorContainer = Color(0xFF93000A)&#10;val md_theme_dark_onError = Color(0xFF690005)&#10;val md_theme_dark_onErrorContainer = Color(0xFFFFDAD6)&#10;val md_theme_dark_background = Color(0xFF191C1B)&#10;val md_theme_dark_onBackground = Color(0xFFE1E3E0)&#10;val md_theme_dark_surface = Color(0xFF191C1B)&#10;val md_theme_dark_onSurface = Color(0xFFE1E3E0)&#10;val md_theme_dark_surfaceVariant = Color(0xFF3F4945)&#10;val md_theme_dark_onSurfaceVariant = Color(0xFFBFC9C4)&#10;val md_theme_dark_outline = Color(0xFF89938F)&#10;val md_theme_dark_inverseOnSurface = Color(0xFF191C1B)&#10;val md_theme_dark_inverseSurface = Color(0xFFE1E3E0)&#10;val md_theme_dark_inversePrimary = Color(0xFF006B5A)&#10;val md_theme_dark_surfaceTint = Color(0xFF5CDBC0)&#10;val md_theme_dark_outlineVariant = Color(0xFF3F4945)&#10;val md_theme_dark_scrim = Color(0xFF000000)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.ashish.csv_parser_android.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = md_theme_light_primary,&#10;    onPrimary = md_theme_light_onPrimary,&#10;    primaryContainer = md_theme_light_primaryContainer,&#10;    onPrimaryContainer = md_theme_light_onPrimaryContainer,&#10;    secondary = md_theme_light_secondary,&#10;    onSecondary = md_theme_light_onSecondary,&#10;    secondaryContainer = md_theme_light_secondaryContainer,&#10;    onSecondaryContainer = md_theme_light_onSecondaryContainer,&#10;    tertiary = md_theme_light_tertiary,&#10;    onTertiary = md_theme_light_onTertiary,&#10;    tertiaryContainer = md_theme_light_tertiaryContainer,&#10;    onTertiaryContainer = md_theme_light_onTertiaryContainer,&#10;    error = md_theme_light_error,&#10;    errorContainer = md_theme_light_errorContainer,&#10;    onError = md_theme_light_onError,&#10;    onErrorContainer = md_theme_light_onErrorContainer,&#10;    background = md_theme_light_background,&#10;    onBackground = md_theme_light_onBackground,&#10;    surface = md_theme_light_surface,&#10;    onSurface = md_theme_light_onSurface,&#10;    surfaceVariant = md_theme_light_surfaceVariant,&#10;    onSurfaceVariant = md_theme_light_onSurfaceVariant,&#10;    outline = md_theme_light_outline,&#10;    inverseOnSurface = md_theme_light_inverseOnSurface,&#10;    inverseSurface = md_theme_light_inverseSurface,&#10;    inversePrimary = md_theme_light_inversePrimary,&#10;    surfaceTint = md_theme_light_surfaceTint,&#10;    outlineVariant = md_theme_light_outlineVariant,&#10;    scrim = md_theme_light_scrim,&#10;)&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = md_theme_dark_primary,&#10;    onPrimary = md_theme_dark_onPrimary,&#10;    primaryContainer = md_theme_dark_primaryContainer,&#10;    onPrimaryContainer = md_theme_dark_onPrimaryContainer,&#10;    secondary = md_theme_dark_secondary,&#10;    onSecondary = md_theme_dark_onSecondary,&#10;    secondaryContainer = md_theme_dark_secondaryContainer,&#10;    onSecondaryContainer = md_theme_dark_onSecondaryContainer,&#10;    tertiary = md_theme_dark_tertiary,&#10;    onTertiary = md_theme_dark_onTertiary,&#10;    tertiaryContainer = md_theme_dark_tertiaryContainer,&#10;    onTertiaryContainer = md_theme_dark_onTertiaryContainer,&#10;    error = md_theme_dark_error,&#10;    errorContainer = md_theme_dark_errorContainer,&#10;    onError = md_theme_dark_onError,&#10;    onErrorContainer = md_theme_dark_onErrorContainer,&#10;        colorScheme = colorScheme,&#10;        content = content&#10;    )&#10;&#10;    background = md_theme_dark_background,&#10;    onBackground = md_theme_dark_onBackground,&#10;    surface = md_theme_dark_surface,&#10;    onSurface = md_theme_dark_onSurface,&#10;    surfaceVariant = md_theme_dark_surfaceVariant,&#10;    onSurfaceVariant = md_theme_dark_onSurfaceVariant,&#10;    outline = md_theme_dark_outline,&#10;    inverseOnSurface = md_theme_dark_inverseOnSurface,&#10;    inverseSurface = md_theme_dark_inverseSurface,&#10;    inversePrimary = md_theme_dark_inversePrimary,&#10;    surfaceTint = md_theme_dark_surfaceTint,&#10;    outlineVariant = md_theme_dark_outlineVariant,&#10;    scrim = md_theme_dark_scrim,&#10;)&#10;&#10;@Composable&#10;fun CsvParserAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;" />
              <option name="updatedContent" value="package com.ashish.csv_parser_android.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = md_theme_light_primary,&#10;    onPrimary = md_theme_light_onPrimary,&#10;    primaryContainer = md_theme_light_primaryContainer,&#10;    onPrimaryContainer = md_theme_light_onPrimaryContainer,&#10;    secondary = md_theme_light_secondary,&#10;    onSecondary = md_theme_light_onSecondary,&#10;    secondaryContainer = md_theme_light_secondaryContainer,&#10;    onSecondaryContainer = md_theme_light_onSecondaryContainer,&#10;    tertiary = md_theme_light_tertiary,&#10;    onTertiary = md_theme_light_onTertiary,&#10;    tertiaryContainer = md_theme_light_tertiaryContainer,&#10;    onTertiaryContainer = md_theme_light_onTertiaryContainer,&#10;    error = md_theme_light_error,&#10;    errorContainer = md_theme_light_errorContainer,&#10;    onError = md_theme_light_onError,&#10;    onErrorContainer = md_theme_light_onErrorContainer,&#10;    background = md_theme_light_background,&#10;    onBackground = md_theme_light_onBackground,&#10;    surface = md_theme_light_surface,&#10;    onSurface = md_theme_light_onSurface,&#10;    surfaceVariant = md_theme_light_surfaceVariant,&#10;    onSurfaceVariant = md_theme_light_onSurfaceVariant,&#10;    outline = md_theme_light_outline,&#10;    inverseOnSurface = md_theme_light_inverseOnSurface,&#10;    inverseSurface = md_theme_light_inverseSurface,&#10;    inversePrimary = md_theme_light_inversePrimary,&#10;    surfaceTint = md_theme_light_surfaceTint,&#10;    outlineVariant = md_theme_light_outlineVariant,&#10;    scrim = md_theme_light_scrim,&#10;)&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = md_theme_dark_primary,&#10;    onPrimary = md_theme_dark_onPrimary,&#10;    primaryContainer = md_theme_dark_primaryContainer,&#10;    onPrimaryContainer = md_theme_dark_onPrimaryContainer,&#10;    secondary = md_theme_dark_secondary,&#10;    onSecondary = md_theme_dark_onSecondary,&#10;    secondaryContainer = md_theme_dark_secondaryContainer,&#10;    onSecondaryContainer = md_theme_dark_onSecondaryContainer,&#10;    tertiary = md_theme_dark_tertiary,&#10;    onTertiary = md_theme_dark_onTertiary,&#10;    tertiaryContainer = md_theme_dark_tertiaryContainer,&#10;    onTertiaryContainer = md_theme_dark_onTertiaryContainer,&#10;    error = md_theme_dark_error,&#10;    errorContainer = md_theme_dark_errorContainer,&#10;    onError = md_theme_dark_onError,&#10;    onErrorContainer = md_theme_dark_onErrorContainer,&#10;    background = md_theme_dark_background,&#10;    onBackground = md_theme_dark_onBackground,&#10;    surface = md_theme_dark_surface,&#10;    onSurface = md_theme_dark_onSurface,&#10;    surfaceVariant = md_theme_dark_surfaceVariant,&#10;    onSurfaceVariant = md_theme_dark_onSurfaceVariant,&#10;    outline = md_theme_dark_outline,&#10;    inverseOnSurface = md_theme_dark_inverseOnSurface,&#10;    inverseSurface = md_theme_dark_inverseSurface,&#10;    inversePrimary = md_theme_dark_inversePrimary,&#10;    surfaceTint = md_theme_dark_surfaceTint,&#10;    outlineVariant = md_theme_dark_outlineVariant,&#10;    scrim = md_theme_dark_scrim,&#10;)&#10;&#10;@Composable&#10;fun CsvParserAndroidTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/viewmodel/CsvViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ashish/csv_parser_android/viewmodel/CsvViewModel.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>